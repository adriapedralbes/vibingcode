"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import { Markdown } from "@/components/ui/markdown";
import { cn } from "@/lib/utils";

interface DocSection {
  id: string;
  title: string;
  content: string;
}

export function DocumentationContent() {
  const [activeSection, setActiveSection] = useState<string>("getting-started");

  const sections: DocSection[] = [
    {
      id: "getting-started",
      title: "Getting Started",
      content: `
# Getting Started with AI Prompt Optimizer

The AI Prompt Optimizer is designed to help you create effective prompts for AI coding assistants. By providing a brief description of your project idea, our specialized AI agent will generate:

1. **Documentation** - A non-technical overview of your project architecture
2. **Action Plan** - A detailed technical implementation plan with steps and subtasks

## How to Use

1. Navigate to the main page of the AI Prompt Optimizer
2. Enter your project idea in the text area provided
3. Click "Generate Optimized Prompt"
4. Review the generated documentation and action plan
5. Use the optimized prompt with your preferred AI coding assistant

## Tips for Better Results

- Be specific about what you want to build
- Include key features or functionality you need
- Mention any specific technologies or frameworks you prefer
- Specify any constraints or requirements
      `
    },
    {
      id: "examples",
      title: "Examples",
      content: `
# Example Prompts and Results

Here are some examples of project ideas and the optimized prompts generated for them.

## Example 1: Task Management App

**User Input:**
"I want to build a task management app with user authentication, task creation, and task assignment features."

**Generated Documentation:**
The documentation provides an overview of the application architecture, including:
- User authentication system
- Task management module
- Assignment and notification system
- Data storage approach

**Generated Action Plan:**
The action plan breaks down the implementation into steps:
1. Set up project structure and dependencies
2. Implement user authentication
3. Create task management features
4. Build assignment functionality
5. Add notification system
6. Implement data persistence
7. Create user interface
8. Test and deploy

## Example 2: E-commerce Website

**User Input:**
"I need an e-commerce website with product listings, shopping cart, and payment processing."

**Generated Documentation:**
The documentation outlines the architecture for:
- Product catalog system
- Shopping cart functionality
- Payment processing integration
- User account management

**Generated Action Plan:**
The action plan provides detailed steps for implementation:
1. Set up project and dependencies
2. Create product catalog and database
3. Implement shopping cart functionality
4. Integrate payment processing
5. Build user account system
6. Design and implement UI
7. Add search and filtering
8. Test and optimize
      `
    },
    {
      id: "best-practices",
      title: "Best Practices",
      content: `
# Best Practices for AI Prompt Optimization

Follow these best practices to get the most out of the AI Prompt Optimizer.

## Writing Effective Project Descriptions

- **Be Clear and Concise**: Clearly state what you want to build
- **Include Key Features**: List the main features or functionality
- **Specify Technologies**: Mention preferred technologies or frameworks
- **Define Constraints**: Note any limitations or requirements
- **Provide Context**: Include relevant background information

## Using the Generated Output

- **Review Both Sections**: The documentation provides architectural overview while the action plan gives technical details
- **Customize as Needed**: Feel free to modify the generated output to better suit your needs
- **Combine with Your Knowledge**: Use the output as a starting point and add your expertise
- **Iterate if Necessary**: If the results aren't what you expected, try refining your input and generating again

## Working with AI Coding Assistants

- **Provide the Full Context**: Share both the documentation and action plan with your AI coding assistant
- **Ask Specific Questions**: Use the generated structure to ask targeted questions
- **Break Down Implementation**: Implement the project step by step following the action plan
- **Validate the Output**: Always review and test the code generated by AI assistants
      `
    },
    {
      id: "advanced-usage",
      title: "Advanced Usage",
      content: `
# Advanced Usage Techniques

Take your AI prompt optimization to the next level with these advanced techniques.

## Refining Your Project Description

- **Include User Stories**: Describe features from the user's perspective
- **Specify Architecture Preferences**: Mention architectural patterns you prefer
- **Detail Integration Requirements**: Specify external services or APIs to integrate
- **Note Performance Considerations**: Mention any performance requirements
- **Include Security Requirements**: Specify security needs or compliance requirements

## Customizing the Output

- **Request Specific Documentation Sections**: Ask for specific sections in your documentation
- **Specify Action Plan Detail Level**: Request more or less detailed action plans
- **Focus on Specific Areas**: Ask for more detail on particular aspects of your project
- **Request Alternative Approaches**: Ask for different implementation strategies

## Saving and Sharing Results

- **Save Generated Results**: Store your optimized prompts for future reference
- **Share with Team Members**: Collaborate by sharing the generated documentation and action plans
- **Version Your Prompts**: Keep track of different versions as your project evolves
- **Create Project Templates**: Use successful prompts as templates for similar projects
      `
    },
    {
      id: "troubleshooting",
      title: "Troubleshooting",
      content: `
# Troubleshooting Common Issues

Solutions for common problems you might encounter when using the AI Prompt Optimizer.

## Unclear or Incomplete Results

If the generated documentation or action plan is unclear or incomplete:

1. **Provide More Details**: Add more specific information about your project
2. **Break Down Complex Ideas**: Split complex projects into smaller, more manageable pieces
3. **Specify Areas of Confusion**: Explicitly ask for clarification on confusing parts
4. **Use Technical Terminology**: Include relevant technical terms for your domain

## Technical Errors

If you encounter technical errors:

1. **Check Your Connection**: Ensure you have a stable internet connection
2. **Refresh the Page**: Try refreshing the page and submitting again
3. **Clear Browser Cache**: Clear your browser cache and cookies
4. **Try a Different Browser**: Some issues may be browser-specific
5. **Contact Support**: If problems persist, reach out to our support team

## Improving Results Quality

If you're not satisfied with the quality of the results:

1. **Be More Specific**: Provide more detailed and specific project requirements
2. **Include Examples**: Reference similar projects or examples
3. **Specify Output Format**: Clearly state how you want the information structured
4. **Iterate and Refine**: Use the initial output to refine your prompt and try again
      `
    }
  ];

  const currentSection = sections.find(section => section.id === activeSection) || sections[0];

  return (
    <section className="w-full py-12 md:py-24 bg-background">
      <div className="container px-4 md:px-6">
        <div className="flex flex-col md:flex-row gap-10">
          {/* Sidebar Navigation */}
          <div className="md:w-1/4 space-y-1 md:sticky md:top-20 md:self-start">
            <div className="text-lg font-semibold mb-4">Documentation</div>
            {sections.map((section) => (
              <button
                key={section.id}
                id={section.id}
                onClick={() => setActiveSection(section.id)}
                className={cn(
                  "w-full text-left px-4 py-2 rounded-md text-sm transition-colors",
                  activeSection === section.id
                    ? "bg-primary/10 text-primary font-medium"
                    : "text-muted-foreground hover:text-foreground hover:bg-accent"
                )}
              >
                {section.title}
              </button>
            ))}
          </div>

          {/* Main Content */}
          <motion.div
            key={currentSection.id}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.3 }}
            className="md:w-3/4"
          >
            <div className="prose dark:prose-invert max-w-none">
              <Markdown>{currentSection.content}</Markdown>
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
}
